Slip 1
Q1. Create a Simple Application which shows the Life Cycle of Activity.
- Name:LifecycleDemo
- Package name:Leave as default (e.g., `com.example.lifecycledemo`).
1.activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp"
android:gravity="center">
<!-- TextView to show lifecycle messages -->
<TextView
android:id="@+id/lifecycleTextView"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Lifecycle Stage Will Appear Here"
android:textSize="20sp"
android:textColor="#000000" />
<!-- Button to finish the activity -->
<Button
android:id="@+id/exitButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Exit Activity"
android:layout_marginTop="20dp" />
</LinearLayout>
2. MainActivity.java
package com.example.lifecycledemo;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
public class MainActivity extends AppCompatActivity {
// Declare variables
private TextView lifecycleTextView;
private Button exitButton;
private static final String TAG = "LifecycleDemo"; // For logging
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
// Link XML elements to Java
lifecycleTextView = findViewById(R.id.lifecycleTextView);
exitButton = findViewById(R.id.exitButton);
// Update TextView and log
lifecycleTextView.setText("onCreate() Called");
Log.d(TAG, "onCreate() Called");
// Button click to finish activity
exitButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
finish(); // Ends the activity
}
});
}
@Override
protected void onStart() {
super.onStart();
lifecycleTextView.setText("onStart() Called");
Log.d(TAG, "onStart() Called");
}
@Override
protected void onResume() {
super.onResume();
lifecycleTextView.setText("onResume() Called");
Log.d(TAG, "onResume() Called");
}

@Override
protected void onPause() {
super.onPause();
lifecycleTextView.setText("onPause() Called");
Log.d(TAG, "onPause() Called");
}
@Override
protected void onStop() {
super.onStop();
lifecycleTextView.setText("onStop() Called");
Log.d(TAG, "onStop() Called");
}
@Override
protected void onRestart() {
super.onRestart();
lifecycleTextView.setText("onRestart() Called");
Log.d(TAG, "onRestart() Called");
}
@Override
protected void onDestroy() {
super.onDestroy();
lifecycleTextView.setText("onDestroy() Called");
Log.d(TAG, "onDestroy() Called");
}
}
Q2 (OR). Create an Android Application that demonstrate DatePicker and
DatePickerDailog
1. Name: “DatePickerDemo”
2. Package Name: Leave the default (e.g., com.example.datepickerdemo).

1.activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"

android:padding="16dp"
android:gravity="center">
<!-- TextView to display the selected date -->
<TextView
android:id="@+id/dateTextView"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Select a date"
android:textSize="20sp"
android:textColor="#000000" />
<!-- Button to open DatePickerDialog -->
<Button
android:id="@+id/pickDateButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Pick Date"
android:layout_marginTop="20dp" />
</LinearLayout>
2.MainActivity.java
package com.example.datepickerdemo; // Default package name
import android.app.DatePickerDialog;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import java.util.Calendar;
public class MainActivity extends AppCompatActivity {
private TextView dateTextView;
private Button pickDateButton;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Link XML elements to Java
dateTextView = findViewById(R.id.dateTextView);
pickDateButton = findViewById(R.id.pickDateButton);
// Set up button click to show DatePickerDialog
pickDateButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Get current date to set as default in DatePicker
Calendar calendar = Calendar.getInstance();
int year = calendar.get(Calendar.YEAR);
int month = calendar.get(Calendar.MONTH);
int day = calendar.get(Calendar.DAY_OF_MONTH);
// Create and show DatePickerDialog
DatePickerDialog datePickerDialog = new DatePickerDialog(
MainActivity.this,
new DatePickerDialog.OnDateSetListener() {
@Override
public void onDateSet(DatePicker view, int year, int month, int
dayOfMonth) {
// Update TextView with selected date
// Month is 0-based, so add 1
String selectedDate = dayOfMonth + "/" + (month + 1) + "/" +
year;
dateTextView.setText("Selected Date: " + selectedDate);
}
},
year, month, day
);
datePickerDialog.show();
}
});
}
}

slip 2
Q1. Create a Simple Application, which reads a positive number from the user
and display its factorial value in another activity
Name: FactorialCalculator
Package name: com.example.factorialcalculator

Step 2: Create the Second Activity
1. Right-click on app > java > com.example.factorialcalculator
2. Select New > Activity > Empty Activity
3. Name it "ResultActivity"
3.activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">

<EditText
android:id="@+id/numberInput"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter a positive number"
android:inputType="number" />

<Button
android:id="@+id/calculateButton"
android:layout_width="match_parent"
android:layout_height="wrap_content"

android:text="Calculate Factorial"
android:layout_marginTop="16dp"/>

</LinearLayout>

4.activity_result.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">

<TextView
android:id="@+id/resultText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:textSize="18sp"
android:text="Factorial Result will appear here"/>

<Button
android:id="@+id/backButton"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Back"
android:layout_marginTop="16dp"/>

</LinearLayout>

5.MainActivity.java
package com.example.factorialcalculator;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private EditText numberInput;
private Button calculateButton;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

numberInput = findViewById(R.id.numberInput);
calculateButton = findViewById(R.id.calculateButton);

calculateButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
String input = numberInput.getText().toString();

if (input.isEmpty()) {
Toast.makeText(MainActivity.this, "Please enter a number",
Toast.LENGTH_SHORT).show();
return;
}

int number = Integer.parseInt(input);

if (number < 0) {
Toast.makeText(MainActivity.this, "Please enter a positive number",
Toast.LENGTH_SHORT).show();
return;
}

// Calculate factorial
long factorial = calculateFactorial(number);

// Start ResultActivity with the result
Intent intent = new Intent(MainActivity.this, ResultActivity.class);
intent.putExtra("factorial_result", factorial);
intent.putExtra("original_number", number);
startActivity(intent);
}
});
}

private long calculateFactorial(int n) {
if (n == 0 || n == 1) return 1;

long result = 1;
for (int i = 2; i <= n; i++) {
result *= i;
}
return result;
}
}

6.ResultActivity.java

package com.example.factorialcalculator;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class ResultActivity extends AppCompatActivity {

private TextView resultText;
private Button backButton;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_result);

resultText = findViewById(R.id.resultText);
backButton = findViewById(R.id.backButton);

// Get data from Intent
long factorial = getIntent().getLongExtra("factorial_result", 0);
int originalNumber = getIntent().getIntExtra("original_number", 0);

// Display result
resultText.setText("Factorial of " + originalNumber + " is: " + factorial);

// Back button click listener
backButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
finish(); // Close this activity and return to MainActivity
}
});
}
}

7.AndroidManifest.xml:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.factorialcalculator">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"

android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.FactorialCalculator">
<activity
android:name=".ResultActivity"
android:exported="false"/>
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>

</manifest>

Q2. Create an Android application that plays an audio(song) in the background.
Audio will notbe stopped even if you switch to another activity. To stop the
audio, you need to stop the service.
Name: AudioBackgroundApp
Package name: com.example.audiobackgroundapp
1. Create a "raw" folder:
• Right-click on app/src/main/res
• New > Android Resource Directory
• Directory name: raw
• Resource type: raw

2.Add an audio file (e.g., "sample.mp3") to res/raw/
# audio file name -kunal
3. Create the Audio Service
1. Right-click on app/java/com.example.audiobackgroundapp
2. New > Service > Service
3. Name: AudioService
4. Check "Exported" and uncheck "Enabled"
5. Click "Finish"
4.. activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">

<Button
android:id="@+id/startButton"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Start Audio" />

<Button
android:id="@+id/stopButton"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Stop Audio" />

<Button
android:id="@+id/nextActivityButton"

android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Go to Next Activity" />

</LinearLayout>

Step 5: Create Second Activity
1. Right-click app/java/com.example.audiobackgroundapp
2. New > Activity > Empty Activity
3. Name: SecondActivity
4. Click "Finish"

5. activity_second.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">

<TextView
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="This is Second Activity"
android:textSize="20sp" />

<Button
android:id="@+id/backButton"

android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Back to Main" />

</LinearLayout>

6. MainActivity.java
package com.example.audiobackgroundapp;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;
public class MainActivity extends AppCompatActivity {
private Button startButton, stopButton, nextActivityButton;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
startButton = findViewById(R.id.startButton);
stopButton = findViewById(R.id.stopButton);
nextActivityButton = findViewById(R.id.nextActivityButton);
startButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
startService(new Intent(MainActivity.this, AudioService.class));
}
});
stopButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
stopService(new Intent(MainActivity.this, AudioService.class));
}

});
nextActivityButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
startActivity(new Intent(MainActivity.this, SecondActivity.class));
}
});
}
}
7. SecondActivity.java
package com.example.audiobackgroundapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

private Button backButton;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second);

backButton = findViewById(R.id.backButton);

backButton.setOnClickListener(new View.OnClickListener() {

@Override
public void onClick(View v) {
finish();
}
});
}
}

8.. AudioService.java

package com.example.audiobackgroundapp;

import android.app.Service;
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.IBinder;
import androidx.annotation.Nullable;

public class AudioService extends Service {
private MediaPlayer mediaPlayer;

@Override
public void onCreate() {
super.onCreate();
mediaPlayer = MediaPlayer.create(this, R.raw.kunal); // Changed from "song" to
"kunal"
if (mediaPlayer != null) {
mediaPlayer.setLooping(true);
}

}

@Override
public int onStartCommand(Intent intent, int flags, int startId) {
if (mediaPlayer != null) {
mediaPlayer.start();
}
return START_STICKY;
}

@Override
public void onDestroy() {
super.onDestroy();
if (mediaPlayer != null) {
mediaPlayer.stop();
mediaPlayer.release();
mediaPlayer = null;
}
}

@Nullable
@Override
public IBinder onBind(Intent intent) {
return null;
}
}

6. AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.audiobackgroundapp">

<uses-permission
android:name="android.permission.FOREGROUND_SERVICE" />

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.AudioBackgroundApp">
<activity
android:name=".SecondActivity"
android:exported="false" />
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
<service
android:name=".AudioService"

android:exported="false" />
</application>

</manifest>

slip 3
Q1. Create an Android Application that will change color of the College Name
on click ofPush Button and change the font size, font style of text view using xml.

Name: CollegeNameApp
Package name: com.example.collegenameapp

1.activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp">

<TextView
android:id="@+id/collegeNameTextView"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="S.V.K.T"
android:textSize="20sp"
android:textStyle="normal"
android:textColor="#000000" />

<Button
android:id="@+id/changeButton"

android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Change Style"
android:layout_marginTop="20dp" />

</LinearLayout>

Check for Existing Files:
• Open app/src/main/res/values/.
• Look for styles.xml, themes.xml, or similar files.
• If styles.xml or themes.xml exists, delete themes.xml to avoid duplicates. We’ll
use only styles.xml.
• Create styles.xml:

• Right-click app/src/main/res/values.
• New > Values Resource File.
• File name: styles.
• Click "OK".
2.styles.xml:
<resources>
<!-- Base application theme -->
<style name="Theme.CollegeNameApp"
parent="Theme.MaterialComponents.DayNight.DarkActionBar">
<item name="colorPrimary">@color/purple_500</item>
<item name="colorPrimaryVariant">@color/purple_700</item>
<item name="colorOnPrimary">@color/white</item>
</style>

<!-- TextView style for changed state -->
<style name="CollegeNameStyle">

<item name="android:textSize">30sp</item>
<item name="android:textStyle">bold|italic</item>
</style>
</resources>

4.colors.xml

<?xml version="1.0" encoding="utf-8"?>
<resources>
<color name="purple_500">#FF6200EE</color>
<color name="purple_700">#FF3700B3</color>
<color name="white">#FFFFFFFF</color>
</resources>

5.MainActivity.java

package com.example.collegenameapp;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private TextView collegeNameTextView;

private Button changeButton;
private boolean isChanged = false;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

collegeNameTextView = findViewById(R.id.collegeNameTextView);
changeButton = findViewById(R.id.changeButton);

changeButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
if (!isChanged) {
collegeNameTextView.setTextColor(Color.RED);
collegeNameTextView.setTextAppearance(R.style.CollegeNameStyle);
isChanged = true;
} else {
collegeNameTextView.setTextColor(Color.BLACK);
collegeNameTextView.setTextSize(20);
collegeNameTextView.setTypeface(null,
android.graphics.Typeface.NORMAL);
isChanged = false;
}
}
});
}
}

6.AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.collegenameapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.CollegeNameApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>

</manifest>

Q2. Create an Android Application to find the factorial of a number and Display
the Resulton Alert Box.

Name: FactorialApp
Package name: com.example.factorialapp

1.activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp">

<EditText
android:id="@+id/numberInput"
android:layout_width="200dp"
android:layout_height="wrap_content"
android:hint="Enter a number"
android:inputType="number"
android:textAlignment="center" />

<Button
android:id="@+id/calculateButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Calculate Factorial"

android:layout_marginTop="20dp" />

</LinearLayout>

Step 3: Create styles.xml (Optional but Recommended)
To ensure a consistent theme, we'll add a basic styles.xml.
1. Create styles.xml:

• Right-click app/src/main/res/values.
• New > Values Resource File.
• File name: styles.
• Click "OK".
(ensure that in values folder their is only styles file if there is an theme file then delete
the theme file . if you dont delete the theme file then it shows dublicate error )

3.styles.xml:
<resources>
<!-- Base application theme -->
<style name="Theme.FactorialApp"
parent="Theme.MaterialComponents.DayNight.DarkActionBar">
<item name="colorPrimary">@color/purple_500</item>
<item name="colorPrimaryVariant">@color/purple_700</item>
<item name="colorOnPrimary">@color/white</item>
</style>
</resources>
4.colors.xml (in the values section)
<?xml version="1.0" encoding="utf-8"?>
<resources>
<color name="purple_500">#FF6200EE</color>
<color name="purple_700">#FF3700B3</color>
<color name="white">#FFFFFFFF</color>
</resources>
5.MainActivity.java

package com.example.factorialapp;

import android.app.AlertDialog;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private EditText numberInput;
private Button calculateButton;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

numberInput = findViewById(R.id.numberInput);
calculateButton = findViewById(R.id.calculateButton);

calculateButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
String input = numberInput.getText().toString().trim();

if (input.isEmpty()) {
Toast.makeText(MainActivity.this, "Please enter a number",
Toast.LENGTH_SHORT).show();
return;
}

try {
int number = Integer.parseInt(input);

if (number < 0) {
Toast.makeText(MainActivity.this, "Please enter a non-negative
number", Toast.LENGTH_SHORT).show();
return;
}

long factorial = calculateFactorial(number);
showResultDialog(factorial);

} catch (NumberFormatException e) {
Toast.makeText(MainActivity.this, "Invalid input",
Toast.LENGTH_SHORT).show();
}
}
});
}

private long calculateFactorial(int n) {
if (n == 0 || n == 1) return 1;
long result = 1;

for (int i = 2; i <= n; i++) {
result *= i;
}
return result;
}

private void showResultDialog(long factorial) {
AlertDialog.Builder builder = new AlertDialog.Builder(this);
builder.setTitle("Factorial Result")
.setMessage("Factorial is: " + factorial)
.setPositiveButton("OK", (dialog, which) -> dialog.dismiss())
.show();
}
}

6.AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.factorialapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.FactorialApp">

<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>

</manifest>

slip 4
Q1. Create a Simple Application, that performs Arithmetic Operations. (Use
constraint layout)
Name: ArithmeticApp
Package name: com.example.arithmeticapp

Step 2: Modify activity_main.xml with ConstraintLayout
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:padding="16dp">

<!-- First Number Input -->
<EditText
android:id="@+id/firstNumberInput"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:hint="Enter first number"
android:inputType="numberDecimal"
android:textAlignment="center"
app:layout_constraintEnd_toEndOf="parent"
app:layout_constraintStart_toStartOf="parent"
app:layout_constraintTop_toTopOf="parent"
app:layout_constraintWidth_percent="0.8" />

<!-- Second Number Input -->
<EditText
android:id="@+id/secondNumberInput"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:hint="Enter second number"
android:inputType="numberDecimal"
android:textAlignment="center"
app:layout_constraintEnd_toEndOf="parent"
app:layout_constraintStart_toStartOf="parent"
app:layout_constraintTop_toBottomOf="@id/firstNumberInput"
app:layout_constraintWidth_percent="0.8"
app:layout_constraintVertical_bias="0.1" />

<!-- Operation Buttons -->
<Button
android:id="@+id/addButton"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:text="+"
app:layout_constraintEnd_toStartOf="@id/subtractButton"
app:layout_constraintStart_toStartOf="parent"
app:layout_constraintTop_toBottomOf="@id/secondNumberInput"
app:layout_constraintWidth_percent="0.2"
app:layout_constraintVertical_bias="0.2" />

<Button
android:id="@+id/subtractButton"

android:layout_width="0dp"
android:layout_height="wrap_content"
android:text="-"
app:layout_constraintEnd_toStartOf="@id/multiplyButton"
app:layout_constraintStart_toEndOf="@id/addButton"
app:layout_constraintTop_toBottomOf="@id/secondNumberInput"
app:layout_constraintWidth_percent="0.2"
app:layout_constraintVertical_bias="0.2" />

<Button
android:id="@+id/multiplyButton"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:text="*"
app:layout_constraintEnd_toStartOf="@id/divideButton"
app:layout_constraintStart_toEndOf="@id/subtractButton"
app:layout_constraintTop_toBottomOf="@id/secondNumberInput"
app:layout_constraintWidth_percent="0.2"
app:layout_constraintVertical_bias="0.2" />

<Button
android:id="@+id/divideButton"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:text="/"
app:layout_constraintEnd_toEndOf="parent"
app:layout_constraintStart_toEndOf="@id/multiplyButton"
app:layout_constraintTop_toBottomOf="@id/secondNumberInput"

app:layout_constraintWidth_percent="0.2"
app:layout_constraintVertical_bias="0.2" />

<!-- Result Display -->
<TextView
android:id="@+id/resultTextView"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:text="Result: "
android:textSize="20sp"
android:textAlignment="center"
app:layout_constraintEnd_toEndOf="parent"
app:layout_constraintStart_toStartOf="parent"
app:layout_constraintTop_toBottomOf="@id/addButton"
app:layout_constraintWidth_percent="0.8"
app:layout_constraintVertical_bias="0.2" />

</androidx.constraintlayout.widget.ConstraintLayout>

Step 3: Create styles.xml (Optional but Recommended)
Define a basic theme for consistency.
1. Create styles.xml:

• Right-click app/src/main/res/values.
• New > Values Resource File.
• File name: styles.
• Click "OK".
(note- if you create the styles in values then you delete the theme file. Bcoz if you
dont delete it shows duplicate error )
## styles.xml:

<resources>
<!-- Base application theme -->
<style name="Theme.ArithmeticApp"
parent="Theme.MaterialComponents.DayNight.NoActionBar">
<item name="colorPrimary">@color/purple_500</item>
<item name="colorPrimaryVariant">@color/purple_700</item>
<item name="colorOnPrimary">@color/white</item>
</style>
</resources>

## colors.xml:
<?xml version="1.0" encoding="utf-8"?>
<resources>
<color name="purple_500">#FF6200EE</color>
<color name="purple_700">#FF3700B3</color>
<color name="white">#FFFFFFFF</color>
</resources>

## MainActivity.java

package com.example.arithmeticapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private EditText firstNumberInput, secondNumberInput;
private Button addButton, subtractButton, multiplyButton, divideButton;
private TextView resultTextView;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize views
firstNumberInput = findViewById(R.id.firstNumberInput);
secondNumberInput = findViewById(R.id.secondNumberInput);
addButton = findViewById(R.id.addButton);
subtractButton = findViewById(R.id.subtractButton);
multiplyButton = findViewById(R.id.multiplyButton);
divideButton = findViewById(R.id.divideButton);
resultTextView = findViewById(R.id.resultTextView);

// Set click listeners for each operation
addButton.setOnClickListener(v -> performOperation("add"));
subtractButton.setOnClickListener(v -> performOperation("subtract"));
multiplyButton.setOnClickListener(v -> performOperation("multiply"));
divideButton.setOnClickListener(v -> performOperation("divide"));
}

private void performOperation(String operation) {
String firstInput = firstNumberInput.getText().toString().trim();
String secondInput = secondNumberInput.getText().toString().trim();

// Validate inputs
if (firstInput.isEmpty() || secondInput.isEmpty()) {
Toast.makeText(this, "Please enter both numbers",
Toast.LENGTH_SHORT).show();
return;
}

try {
double num1 = Double.parseDouble(firstInput);
double num2 = Double.parseDouble(secondInput);
double result = 0;

switch (operation) {
case "add":
result = num1 + num2;
break;
case "subtract":
result = num1 - num2;
break;
case "multiply":
result = num1 * num2;
break;
case "divide":
if (num2 == 0) {

Toast.makeText(this, "Cannot divide by zero",
Toast.LENGTH_SHORT).show();
return;
}
result = num1 / num2;
break;
}

// Display result
resultTextView.setText("Result: " + result);

} catch (NumberFormatException e) {
Toast.makeText(this, "Invalid input", Toast.LENGTH_SHORT).show();
}
}
}

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.arithmeticapp">
<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.ArithmeticApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />

<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

Q2. Create an Android Application that sends the Notification on click of the
button and displays the notification message on the second activity. [20 Marks]
Name: NotificationApp
Package name: com.example.notificationapp

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:gravity="center"
android:orientation="vertical">

<Button
android:id="@+id/sendNotificationButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Send Notification" />

</LinearLayout>

Step 3: Create the Second Activity
1. Right-click on app > java > com.example.notificationapp
2. Select New > Activity > Empty Activity
3. Name it: SecondActivity

##activity_second.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:gravity="center"
android:orientation="vertical">

<TextView
android:id="@+id/notificationMessage"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:textSize="18sp" />

</LinearLayout>

##AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.notificationapp">

<uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.NotificationApp">
<activity
android:name=".SecondActivity"
android:exported="false"/>
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

##MainActivity.java

package com.example.notificationapp;

import android.app.NotificationChannel;
import android.app.NotificationManager;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.NotificationCompat;

public class MainActivity extends AppCompatActivity {
private static final String CHANNEL_ID = "NotificationChannel";
private static final int NOTIFICATION_ID = 1;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

Button sendNotificationButton = findViewById(R.id.sendNotificationButton);

// Create notification channel
createNotificationChannel();

sendNotificationButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
String message = "This is a notification message!";
sendNotification(message);
displayMessageInSecondActivity(message);

}
});
}

private void createNotificationChannel() {
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
CharSequence name = "My Notification Channel";
String description = "Channel for notification demo";
int importance = NotificationManager.IMPORTANCE_DEFAULT;
NotificationChannel channel = new NotificationChannel(CHANNEL_ID,
name, importance);
channel.setDescription(description);

NotificationManager notificationManager =
getSystemService(NotificationManager.class);
notificationManager.createNotificationChannel(channel);
}
}

private void sendNotification(String message) {
NotificationCompat.Builder builder = new NotificationCompat.Builder(this,
CHANNEL_ID)
.setSmallIcon(android.R.drawable.ic_dialog_info)
.setContentTitle("Notification Demo")
.setContentText(message)
.setPriority(NotificationCompat.PRIORITY_DEFAULT)
.setAutoCancel(true);

NotificationManager notificationManager =
getSystemService(NotificationManager.class);

notificationManager.notify(NOTIFICATION_ID, builder.build());
}

private void displayMessageInSecondActivity(String message) {
Intent intent = new Intent(this, SecondActivity.class);
intent.putExtra("notificationMessage", message);
startActivity(intent);
}
}

##SecondActivity.java
package com.example.notificationapp;

import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second);

TextView notificationMessage = findViewById(R.id.notificationMessage);

// Get the message from the intent
String message = getIntent().getStringExtra("notificationMessage");
if (message != null) {

notificationMessage.setText(message);
} else {
notificationMessage.setText("No notification message received");
}
}
}

slip 5
Q1. Create an Android Application to accept two numbers and find power and
Average. Display the result on the next activity on Button click.

Name "CalculatorApp"
##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">

<EditText
android:id="@+id/number1"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter first number"
android:inputType="numberDecimal"/>

<EditText
android:id="@+id/number2"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter second number"
android:inputType="numberDecimal"/>

<Button

android:id="@+id/calculateButton"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Calculate"/>
</LinearLayout>

##MainActivity.java
package com.example.calculatorapp;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
private EditText number1EditText, number2EditText;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

number1EditText = findViewById(R.id.number1);
number2EditText = findViewById(R.id.number2);
Button calculateButton = findViewById(R.id.calculateButton);

calculateButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
calculateAndShowResult();
}
});
}

private void calculateAndShowResult() {
try {
double num1 = Double.parseDouble(number1EditText.getText().toString());
double num2 = Double.parseDouble(number2EditText.getText().toString());

double power = Math.pow(num1, num2);
double average = (num1 + num2) / 2;

Intent intent = new Intent(MainActivity.this, ResultActivity.class);
intent.putExtra("power", power);
intent.putExtra("average", average);
startActivity(intent);
} catch (NumberFormatException e) {
number1EditText.setError("Please enter valid numbers");
}
}
}

## create new activity as ResultActivity
##activity_result.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">

<TextView
android:id="@+id/powerResult"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:textSize="18sp"/>

<TextView
android:id="@+id/averageResult"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:textSize="18sp"/>
</LinearLayout>

##ResultActivity.java
package com.example.calculatorapp;

import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class ResultActivity extends AppCompatActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_result);

TextView powerResult = findViewById(R.id.powerResult);
TextView averageResult = findViewById(R.id.averageResult);

// Get data from Intent
double power = getIntent().getDoubleExtra("power", 0);
double average = getIntent().getDoubleExtra("average", 0);

// Display results
powerResult.setText("Power: " + power);
averageResult.setText("Average: " + average);
}
}

##AndroidManifest.xml:

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.calculatorapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"

android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.CalculatorApp">

<activity
android:name=".ResultActivity"
android:exported="false"/>

<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

Q2. Create an Android application that creates a custom Alert Dialog containing
Friends Name and onClick of Friend Name Button greet accordingly

Name: FriendsDialogApp
Package name: com.example.friendsdialogapp

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"

android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp">

<Button
android:id="@+id/showDialogButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Show Friends Dialog"/>
</LinearLayout>

Step 3: Create Custom Dialog Layout (res/layout/dialog_friends.xml)
• Right-click on res/layout → New → Layout Resource File
• Name: dialog_friends

##Dialog_friends.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"
android:padding="16dp">

<TextView
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Select a Friend"
android:textSize="18sp"

android:textStyle="bold"
android:gravity="center"/>

<Button
android:id="@+id/friend1Button"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Kunal"
android:layout_marginTop="8dp"/>

<Button
android:id="@+id/friend2Button"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Nikita"
android:layout_marginTop="8dp"/>

<Button
android:id="@+id/friend3Button"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Isha"
android:layout_marginTop="8dp"/>
</LinearLayout>

##MainActivity.java
package com.example.friendsdialogapp;

import android.app.Dialog;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize the button from main layout
Button showDialogButton = findViewById(R.id.showDialogButton);

// Set click listener to show the dialog
showDialogButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
showFriendsDialog();
}
});
}

private void showFriendsDialog() {
// Create a new dialog

final Dialog dialog = new Dialog(MainActivity.this);
dialog.setContentView(R.layout.dialog_friends);
dialog.setTitle("Friends List");

// Initialize buttons from dialog layout
Button friend1Button = dialog.findViewById(R.id.friend1Button); // Kunal
Button friend2Button = dialog.findViewById(R.id.friend2Button); // Nikita
Button friend3Button = dialog.findViewById(R.id.friend3Button); // Isha

// Click listener for Kunal
friend1Button.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Toast.makeText(MainActivity.this, "Hello Kunal! Nice to see you!",
Toast.LENGTH_SHORT).show();
dialog.dismiss();
}
});

// Click listener for Nikita
friend2Button.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Toast.makeText(MainActivity.this, "Hey Nikita! How's it going?",
Toast.LENGTH_SHORT).show();
dialog.dismiss();
}
});

// Click listener for Isha
friend3Button.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Toast.makeText(MainActivity.this, "Hi Isha! Good day!",
Toast.LENGTH_SHORT).show();
dialog.dismiss();
}
});

// Show the dialog
dialog.show();
}
}

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.friendsdialogapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.FriendsDialogApp">
<activity
android:name=".MainActivity"
android:exported="true">

<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

slip 6
Q1. Create a Simple Application Which Send ―Hello! message from one activity
to anotherwith help of Button (Use Intent).

Name: MessageApp
Package name: com.example.messageapp

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="First Activity"
android:textSize="20sp"
android:textStyle="bold"/>

<Button
android:id="@+id/sendMessageButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"

android:text="Send Message"
android:layout_marginTop="16dp"/>
</LinearLayout>

Step 4: Create SecondActivity.java
• Name: SecondActivity
##activity_second.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Second Activity"
android:textSize="20sp"
android:textStyle="bold"/>

<TextView
android:id="@+id/messageTextView"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:textSize="18sp"

android:layout_marginTop="16dp"/>
</LinearLayout>

##SecondActivity.java
package com.example.messageapp;

import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second);

// Initialize the TextView
TextView messageTextView = findViewById(R.id.messageTextView);

// Get the message from the Intent
String message = getIntent().getStringExtra("message");

// Display the message
if (message != null) {
messageTextView.setText(message);
} else {
messageTextView.setText("No message received");

}
}
}

##MainActivity.java
package com.example.messageapp;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize the button
Button sendMessageButton = findViewById(R.id.sendMessageButton);

// Set click listener for the button
sendMessageButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Create an Intent to start SecondActivity

Intent intent = new Intent(MainActivity.this, SecondActivity.class);

// Add the "Hello!" message to the Intent
intent.putExtra("message", "Hello!");

// Start the SecondActivity
startActivity(intent);
}
});
}
}

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.messageapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.MessageApp">
<activity
android:name=".SecondActivity"
android:exported="false"/>
<activity

android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>
Q2. Create an Android Application that Demonstrates ListView and Onclick of
List Displaythe Toast.

Name: ListViewApp
Package name: com.example.listviewapp

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Select an Item"

android:textSize="20sp"
android:textStyle="bold"
android:layout_gravity="center"/>

<ListView
android:id="@+id/listView"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:layout_marginTop="16dp"/>
</LinearLayout>

##MainActivity.java
package com.example.listviewapp;

import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

// Array of items to display in the ListView
private String[] items = {"Apple", "Banana", "Orange", "Grapes", "Mango"};

@Override

protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize the ListView
ListView listView = findViewById(R.id.listView);

// Create an ArrayAdapter to populate the ListView
ArrayAdapter<String> adapter = new ArrayAdapter<>(
this,
android.R.layout.simple_list_item_1, // Default layout for list items
items
);

// Set the adapter to the ListView
listView.setAdapter(adapter);

// Set an OnItemClickListener for the ListView
listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
@Override
public void onItemClick(AdapterView<?> parent, View view, int position,
long id) {
// Get the selected item
String selectedItem = items[position];

// Display a Toast with the selected item
Toast.makeText(MainActivity.this, "You clicked: " + selectedItem,
Toast.LENGTH_SHORT).show();
}

});
}
}

##AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.listviewapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.ListViewApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

slip 7
Q1. Create an Android Application that Demonstrate Radio Button

Name: RadioButtonApp
Package name: com.example.radiobuttonapp

##activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp"
android:gravity="center">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Select Your Favorite Fruit"
android:textSize="20sp"
android:textStyle="bold"/>

<RadioGroup
android:id="@+id/radioGroup"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:layout_marginTop="16dp">

<RadioButton
android:id="@+id/radioApple"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Apple"
android:textSize="18sp"/>

<RadioButton
android:id="@+id/radioBanana"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Banana"
android:textSize="18sp"/>

<RadioButton
android:id="@+id/radioOrange"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Orange"
android:textSize="18sp"/>
</RadioGroup>

<Button
android:id="@+id/submitButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Submit"

android:layout_marginTop="20dp"/>
</LinearLayout>

##MainActivity.java
package com.example.radiobuttonapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private RadioGroup radioGroup;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize RadioGroup and Button
radioGroup = findViewById(R.id.radioGroup);
Button submitButton = findViewById(R.id.submitButton);

// Set click listener for the submit button

submitButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Get the ID of the selected RadioButton
int selectedId = radioGroup.getCheckedRadioButtonId();

// Check if a RadioButton is selected
if (selectedId == -1) {
Toast.makeText(MainActivity.this, "Please select an option!",
Toast.LENGTH_SHORT).show();
} else {
// Find the selected RadioButton
RadioButton selectedRadioButton = findViewById(selectedId);

// Get the text of the selected RadioButton
String selectedOption = selectedRadioButton.getText().toString();

// Display the selected option in a Toast
Toast.makeText(MainActivity.this, "You selected: " + selectedOption,
Toast.LENGTH_SHORT).show();
}
}
});
}
}

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"

package="com.example.radiobuttonapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.RadioButtonApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

Q2.Create an Android application to demonstrate phone call using Implicit
Intent.

Name: PhoneCallApp
Package name: com.example.phonecallapp

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"

android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp"
android:gravity="center">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Make a Phone Call"
android:textSize="20sp"
android:textStyle="bold"/>

<EditText
android:id="@+id/phoneNumberEditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter phone number"
android:inputType="phone"
android:layout_marginTop="16dp"/>

<Button
android:id="@+id/callButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Call"
android:layout_marginTop="16dp"/>
</LinearLayout>

##MainActivity.java

##AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.phonecallapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.PhoneCallApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

slip 8
Q1. Create an Android App with Login Screen. On successful login, gives
message go to next Activity (Without Using Database& use Table Layout).

Name: LoginApp
Package name: com.example.loginapp

Step 2: Create the Second Activity
Name : WelcomeActivity .
##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<TableLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:padding="16dp"
android:gravity="center">

<TableRow>
<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Login Screen"
android:textSize="24sp"
android:textStyle="bold"
android:layout_span="2"
android:gravity="center"/>

</TableRow>

<TableRow
android:layout_marginTop="20dp">
<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Username:"
android:textSize="18sp"/>
<EditText
android:id="@+id/usernameEditText"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_weight="1"
android:hint="Enter username"/>
</TableRow>

<TableRow
android:layout_marginTop="10dp">
<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Password:"
android:textSize="18sp"/>
<EditText
android:id="@+id/passwordEditText"
android:layout_width="wrap_content"
android:layout_height="wrap_content"

android:layout_weight="1"
android:hint="Enter password"
android:inputType="textPassword"/>
</TableRow>

<TableRow
android:layout_marginTop="20dp">
<Button
android:id="@+id/loginButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Login"
android:layout_span="2"
android:layout_gravity="center"/>
</TableRow>
</TableLayout>

##activity_welcome.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp">

<TextView
android:layout_width="wrap_content"

android:layout_height="wrap_content"
android:text="Welcome!"
android:textSize="24sp"
android:textStyle="bold"/>

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Login successful. Go to next activity."
android:textSize="18sp"
android:layout_marginTop="16dp"/>
</LinearLayout>

##MainActivity.java
package com.example.loginapp;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
public class MainActivity extends AppCompatActivity {
private EditText usernameEditText, passwordEditText;
private static final String VALID_USERNAME = "kunal";
private static final String VALID_PASSWORD = "kukki";
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
// Initialize UI elements

usernameEditText = findViewById(R.id.usernameEditText);
passwordEditText = findViewById(R.id.passwordEditText);
Button loginButton = findViewById(R.id.loginButton);
// Set click listener for login button
loginButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
checkLogin();
}
});
}
private void checkLogin() {
String username = usernameEditText.getText().toString().trim();
String password = passwordEditText.getText().toString().trim();
// Check credentials (hardcoded for simplicity)
if (username.equals(VALID_USERNAME) &&
password.equals(VALID_PASSWORD)) {
Toast.makeText(this, "Login successful. Go to next activity.",
Toast.LENGTH_SHORT).show();
Intent intent = new Intent(MainActivity.this, WelcomeActivity.class);
startActivity(intent);
finish(); // Optional: Close the login activity
} else {
Toast.makeText(this, "Invalid username or password",
Toast.LENGTH_SHORT).show();
}
}
}
##WelcomeActivity.java
package com.example.loginapp;

import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;

public class WelcomeActivity extends AppCompatActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_welcome);
}
}

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.loginapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.LoginApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>

</activity>
<activity
android:name=".WelcomeActivity"
android:exported="false"/>
</application>
</manifest>

(note- username=kunal and the password =kukki)

Q2. Create application to send email with attachment.

Name: EmailApp
Package name: com.example.emailapp

##AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.emailapp">
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:maxSdkVersion="28"
android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.EmailApp"
android:requestLegacyExternalStorage="true">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp">
<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Send Email with Attachment"
android:textSize="20sp"
android:textStyle="bold"
android:layout_gravity="center"
android:layout_marginBottom="20dp"/>
<EditText
android:id="@+id/recipientEditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Recipient Email"
android:inputType="textEmailAddress"
android:layout_marginBottom="10dp"/>
<EditText
android:id="@+id/subjectEditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Subject"
android:layout_marginBottom="10dp"/>
<EditText
android:id="@+id/bodyEditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Email Body"
android:inputType="textMultiLine"
android:minLines="3"
android:layout_marginBottom="10dp"/>
<Button
android:id="@+id/selectFileButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Select Attachment"
android:layout_gravity="center"
android:layout_marginBottom="10dp"/>
<TextView
android:id="@+id/filePathTextView"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="No file selected"
android:layout_marginBottom="10dp"/>
<Button
android:id="@+id/sendEmailButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"

android:text="Send Email"
android:layout_gravity="center"/>
</LinearLayout>

##MainActivity.java
package com.example.emailapp;
import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
public class MainActivity extends AppCompatActivity {
private static final int REQUEST_STORAGE_PERMISSION = 100;
private static final int REQUEST_FILE_PICK = 200;
private EditText recipientEditText, subjectEditText, bodyEditText;
private TextView filePathTextView;
private Uri fileUri;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
// Initialize UI elements
recipientEditText = findViewById(R.id.recipientEditText);
subjectEditText = findViewById(R.id.subjectEditText);
bodyEditText = findViewById(R.id.bodyEditText);
filePathTextView = findViewById(R.id.filePathTextView);
Button selectFileButton = findViewById(R.id.selectFileButton);
Button sendEmailButton = findViewById(R.id.sendEmailButton);
// Log to verify initialization
Log.d("EmailApp", "onCreate called, initializing UI elements");
if (selectFileButton == null) {
Log.e("EmailApp", "selectFileButton is null - check
activity_main.xml for ID");
}
if (sendEmailButton == null) {
Log.e("EmailApp", "sendEmailButton is null - check activity_main.xml
for ID");
}
// Select file button click listener
selectFileButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {

Log.d("EmailApp", "Select Attachment button clicked");
checkStoragePermission();
}
});
// Send email button click listener
sendEmailButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Log.d("EmailApp", "Send Email button clicked");
sendEmail();
}
});
}
private void checkStoragePermission() {
Log.d("EmailApp", "Checking READ_EXTERNAL_STORAGE permission");
if (ContextCompat.checkSelfPermission(this,
Manifest.permission.READ_EXTERNAL_STORAGE)
!= PackageManager.PERMISSION_GRANTED) {
Log.d("EmailApp", "Permission not granted, requesting
READ_EXTERNAL_STORAGE");
if (ActivityCompat.shouldShowRequestPermissionRationale(this,
Manifest.permission.READ_EXTERNAL_STORAGE)) {
Log.d("EmailApp", "Showing permission rationale");
Toast.makeText(this, "Storage permission is needed to select a
file. Please allow it.", Toast.LENGTH_LONG).show();
}
ActivityCompat.requestPermissions(this,
new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
REQUEST_STORAGE_PERMISSION);
} else {
Log.d("EmailApp", "Storage permission already granted");
pickFile();
}
}
@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[]
permissions,
@NonNull int[] grantResults) {
super.onRequestPermissionsResult(requestCode, permissions,
grantResults);
Log.d("EmailApp", "onRequestPermissionsResult called with requestCode: "
+ requestCode);
if (requestCode == REQUEST_STORAGE_PERMISSION) {
if (grantResults.length > 0 && grantResults[0] ==
PackageManager.PERMISSION_GRANTED) {
Log.d("EmailApp", "Storage permission granted by user");
Toast.makeText(this, "Storage permission granted",
Toast.LENGTH_SHORT).show();
pickFile();
} else {
Log.d("EmailApp", "Storage permission denied by user,
grantResults: " + grantResults[0]);
Toast.makeText(this, "Storage permission denied. Please enable
it in Settings.", Toast.LENGTH_LONG).show();
Intent intent = new
Intent(android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
Uri uri = Uri.fromParts("package", getPackageName(), null);
intent.setData(uri);
startActivity(intent);
}
} else {

Log.d("EmailApp", "Unexpected requestCode: " + requestCode);
}
}
private void pickFile() {
Log.d("EmailApp", "Launching file picker with ACTION_OPEN_DOCUMENT");
Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
intent.addCategory(Intent.CATEGORY_OPENABLE);
intent.setType("*/*");
intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);
try {
startActivityForResult(Intent.createChooser(intent, "Select a
file"), REQUEST_FILE_PICK);
} catch (android.content.ActivityNotFoundException e) {
Log.e("EmailApp", "No activity found to handle file pick: " +
e.getMessage());
Toast.makeText(this, "No file picker available",
Toast.LENGTH_SHORT).show();
}
}
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent
data) {
super.onActivityResult(requestCode, resultCode, data);
Log.d("EmailApp", "onActivityResult called with requestCode: " +
requestCode + ", resultCode: " + resultCode);
if (requestCode == REQUEST_FILE_PICK && resultCode == RESULT_OK &&
data != null) {
fileUri = data.getData();
Log.d("EmailApp", "File selected: " + (fileUri != null ?
fileUri.toString() : "null"));
filePathTextView.setText("Selected: " + (fileUri != null ?
fileUri.getPath() : "No file selected"));
} else {
Log.d("EmailApp", "File selection failed or canceled: resultCode=" +
resultCode);
}
}
private void sendEmail() {
String recipient = recipientEditText.getText().toString().trim();
String subject = subjectEditText.getText().toString().trim();
String body = bodyEditText.getText().toString().trim();
if (recipient.isEmpty() || subject.isEmpty() || body.isEmpty()) {
Toast.makeText(this, "Please fill all fields",
Toast.LENGTH_SHORT).show();
return;
}
if (fileUri == null) {
Toast.makeText(this, "Please select a file to attach",
Toast.LENGTH_SHORT).show();
return;
}
Intent emailIntent = new Intent(Intent.ACTION_SEND);
emailIntent.setType("message/rfc822");
emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{recipient});
emailIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
emailIntent.putExtra(Intent.EXTRA_TEXT, body);
emailIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
emailIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

try {
startActivity(Intent.createChooser(emailIntent, "Send email
via..."));
Log.d("EmailApp", "Email client launched successfully");
} catch (Exception e) {
Log.e("EmailApp", "Error launching email client: " +
e.getMessage());
Toast.makeText(this, "No email client found",
Toast.LENGTH_SHORT).show();
}
}
}

slip 9
Q1. Write an Android application to accept two numbers from the user, and
display them, but reject input if both numbers are greater than 10 and asks for
two new numbers.
Name: NumberCheckApp
Package name: com.example.numbercheckapp

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp"
android:gravity="center">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Enter Two Numbers"
android:textSize="20sp"
android:textStyle="bold"/>

<EditText
android:id="@+id/number1EditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter first number"
android:inputType="numberDecimal"
android:layout_marginTop="16dp"/>

<EditText
android:id="@+id/number2EditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter second number"
android:inputType="numberDecimal"
android:layout_marginTop="16dp"/>

<Button
android:id="@+id/submitButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Submit"
android:layout_marginTop="20dp"/>

<TextView
android:id="@+id/resultTextView"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text=""
android:textSize="18sp"
android:layout_marginTop="16dp"/>
</LinearLayout>

##MainActivity.java

package com.example.numbercheckapp;

import android.os.Bundle;
import android.view.View;

import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private EditText number1EditText, number2EditText;
private TextView resultTextView;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize UI elements
number1EditText = findViewById(R.id.number1EditText);
number2EditText = findViewById(R.id.number2EditText);
Button submitButton = findViewById(R.id.submitButton);
resultTextView = findViewById(R.id.resultTextView);

// Set click listener for the submit button
submitButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
checkNumbers();
}

});
}

private void checkNumbers() {
// Get the input numbers
String num1Str = number1EditText.getText().toString().trim();
String num2Str = number2EditText.getText().toString().trim();

// Check if inputs are empty
if (num1Str.isEmpty() || num2Str.isEmpty()) {
Toast.makeText(this, "Please enter both numbers",
Toast.LENGTH_SHORT).show();
return;
}

// Convert strings to double
double num1 = Double.parseDouble(num1Str);
double num2 = Double.parseDouble(num2Str);

// Check if both numbers are greater than 10
if (num1 > 10 && num2 > 10) {
Toast.makeText(this, "Both numbers are greater than 10. Please enter new
numbers.", Toast.LENGTH_SHORT).show();
number1EditText.setText("");
number2EditText.setText("");
resultTextView.setText("");
} else {
// Display the numbers
resultTextView.setText("Number 1: " + num1 + "\nNumber 2: " + num2);

}
}
}

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.numbercheckapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.NumberCheckApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

Q2. Create table Company (id, name, address, phno). Create Application for
Performing the following operation on the table. a) Insert New Company details.
b) Show All Company details
Name: CompanyApp
Package name: com.example.companyapp

Step 2: Create the Database Helper Class
1. In the Project pane (on the left), expand app > java >

com.example.companyapp.
2. Right-click on com.example.companyapp > New > Java Class.
3. Name the class: DatabaseHelper and click OK.
##Databasehelper.java
package com.example.companyapp;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.List;

public class DatabaseHelper extends SQLiteOpenHelper {

private static final String DATABASE_NAME = "CompanyDB";
private static final int DATABASE_VERSION = 1;
private static final String TABLE_NAME = "Company";
private static final String KEY_ID = "id";
private static final String KEY_NAME = "name";

private static final String KEY_ADDRESS = "address";
private static final String KEY_PHONE = "phno";

public DatabaseHelper(Context context) {
super(context, DATABASE_NAME, null, DATABASE_VERSION);
}

@Override
public void onCreate(SQLiteDatabase db) {
String CREATE_TABLE = "CREATE TABLE " + TABLE_NAME + "("
+ KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
+ KEY_NAME + " TEXT,"
+ KEY_ADDRESS + " TEXT,"
+ KEY_PHONE + " TEXT" + ")";
db.execSQL(CREATE_TABLE);
}

@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
onCreate(db);
}

public void addCompany(String name, String address, String phone) {
SQLiteDatabase db = this.getWritableDatabase();
ContentValues values = new ContentValues();
values.put(KEY_NAME, name);
values.put(KEY_ADDRESS, address);

values.put(KEY_PHONE, phone);
db.insert(TABLE_NAME, null, values);
db.close();
}

public List<Company> getAllCompanies() {
List<Company> companyList = new ArrayList<>();
String selectQuery = "SELECT * FROM " + TABLE_NAME;
SQLiteDatabase db = this.getReadableDatabase();
Cursor cursor = db.rawQuery(selectQuery, null);

if (cursor.moveToFirst()) {
do {
Company company = new Company();
company.setId(cursor.getInt(cursor.getColumnIndexOrThrow(KEY_ID)));
company.setName(cursor.getString(cursor.getColumnIndexOrThrow(KEY_NAME)))
;
company.setAddress(cursor.getString(cursor.getColumnIndexOrThrow(KEY_ADDR
ESS)));
company.setPhone(cursor.getString(cursor.getColumnIndexOrThrow(KEY_PHONE)
));
companyList.add(company);
} while (cursor.moveToNext());
}

cursor.close();
db.close();

return companyList;
}
}

Step 3: Create the Company Model Class
1. In the Project pane, right-click on com.example.companyapp > New >

Java Class.
2. Name the class: Company and click OK.

##Company.java
package com.example.companyapp;

public class Company {
private int id;
private String name;
private String address;
private String phone;

public int getId() {
return id;
}

public void setId(int id) {
this.id = id;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public String getAddress() {
return address;
}

public void setAddress(String address) {
this.address = address;
}

public String getPhone() {
return phone;
}

public void setPhone(String phone) {
this.phone = phone;
}

@Override
public String toString() {
return "ID: " + id + "\nName: " + name + "\nAddress: " + address + "\nPhone: "
+ phone + "\n";
}
}

##activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:fitsSystemWindows="true">

<!-- Toolbar for the title -->
<androidx.appcompat.widget.Toolbar
android:id="@+id/toolbar"
android:layout_width="match_parent"
android:layout_height="?attr/actionBarSize"
android:background="?attr/colorPrimary"
android:title="Company Management"
android:titleTextColor="#FFFFFF"/>

<LinearLayout
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:orientation="vertical"
android:padding="16dp">

<EditText
android:id="@+id/nameEditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"

android:hint="Enter company name"
android:layout_marginTop="16dp"/>

<EditText
android:id="@+id/addressEditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter address"
android:layout_marginTop="16dp"/>

<EditText
android:id="@+id/phoneEditText"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Enter phone number"
android:inputType="phone"
android:layout_marginTop="16dp"/>

<Button
android:id="@+id/addButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Add Company"
android:layout_gravity="center"
android:layout_marginTop="16dp"/>

<Button
android:id="@+id/showButton"

android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Show All Companies"
android:layout_gravity="center"
android:layout_marginTop="16dp"/>

<TextView
android:id="@+id/resultTextView"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text=""
android:textSize="16sp"
android:layout_marginTop="16dp"/>
</LinearLayout>
</LinearLayout>

##MainActivity.java
package com.example.companyapp;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import java.util.List;

public class MainActivity extends AppCompatActivity {

private EditText nameEditText, addressEditText, phoneEditText;
private TextView resultTextView;
private DatabaseHelper dbHelper;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Set up the Toolbar
Toolbar toolbar = findViewById(R.id.toolbar);
setSupportActionBar(toolbar);

// Initialize UI elements
nameEditText = findViewById(R.id.nameEditText);
addressEditText = findViewById(R.id.addressEditText);
phoneEditText = findViewById(R.id.phoneEditText);
Button addButton = findViewById(R.id.addButton);
Button showButton = findViewById(R.id.showButton);
resultTextView = findViewById(R.id.resultTextView);

// Initialize DatabaseHelper
dbHelper = new DatabaseHelper(this);

// Add company button click listener
addButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
addCompany();
}
});

// Show all companies button click listener
showButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
showAllCompanies();
}
});
}

private void addCompany() {
String name = nameEditText.getText().toString().trim();
String address = addressEditText.getText().toString().trim();
String phone = phoneEditText.getText().toString().trim();

if (name.isEmpty() || address.isEmpty() || phone.isEmpty()) {
Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
return;
}

dbHelper.addCompany(name, address, phone);

Toast.makeText(this, "Company added successfully",
Toast.LENGTH_SHORT).show();

nameEditText.setText("");
addressEditText.setText("");
phoneEditText.setText("");
}

private void showAllCompanies() {
List<Company> companies = dbHelper.getAllCompanies();
if (companies.isEmpty()) {
resultTextView.setText("No companies found");
} else {
StringBuilder builder = new StringBuilder();
for (Company company : companies) {
builder.append(company.toString());
}
resultTextView.setText(builder.toString());
}
}
}

##AndroidManifest.xml.
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.companyapp">

<application
android:allowBackup="true"

android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.CompanyApp">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

slip 10
Q1. Create an Android Application that Demonstrate Switch and Toggle Button.

Name: SwitchToggleDemo
Package name: com.example.switchtoggledemo

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.switchtoggledemo">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.SwitchToggleDemo">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>

</application>
</manifest>

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp"
android:fitsSystemWindows="true">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Switch and Toggle Button Demo"
android:textSize="20sp"
android:textStyle="bold"
android:layout_gravity="center"
android:layout_marginBottom="20dp"/>

<Switch
android:id="@+id/switchButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Switch"
android:layout_gravity="center"
android:layout_marginBottom="20dp"/>

<ToggleButton
android:id="@+id/toggleButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:textOn="ON"
android:textOff="OFF"
android:layout_gravity="center"
android:layout_marginBottom="20dp"/>

<TextView
android:id="@+id/stateTextView"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="State: "
android:textSize="16sp"
android:gravity="center"
android:layout_marginTop="20dp"/>
</LinearLayout>

##MainActivity.java

package com.example.switchtoggledemo;

import android.os.Bundle;
import android.widget.CompoundButton;
import android.widget.Switch;
import android.widget.TextView;

import android.widget.ToggleButton;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private Switch switchButton;
private ToggleButton toggleButton;
private TextView stateTextView;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize UI elements
switchButton = findViewById(R.id.switchButton);
toggleButton = findViewById(R.id.toggleButton);
stateTextView = findViewById(R.id.stateTextView);

// Set initial state
updateStateText();

// Add listeners for Switch
switchButton.setOnCheckedChangeListener(new
CompoundButton.OnCheckedChangeListener() {
@Override
public void onCheckedChanged(CompoundButton buttonView, boolean
isChecked) {
updateStateText();

}
});

// Add listener for ToggleButton
toggleButton.setOnCheckedChangeListener(new
CompoundButton.OnCheckedChangeListener() {
@Override
public void onCheckedChanged(CompoundButton buttonView, boolean
isChecked) {
updateStateText();
}
});
}

private void updateStateText() {
String switchState = switchButton.isChecked() ? "ON" : "OFF";
String toggleState = toggleButton.isChecked() ? "ON" : "OFF";
stateTextView.setText("Switch State: " + switchState + "\nToggle Button State: "
+ toggleState);
}
}

Q2. Demonstrate Array Adapter using List View to display list of fruits.

Name: FruitListDemo
Package name: com.example.fruitlistdemo

##AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.fruitlistdemo">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.FruitListDemo">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"

android:padding="16dp"
android:fitsSystemWindows="true">

<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="List of Fruits"
android:textSize="20sp"
android:textStyle="bold"
android:layout_gravity="center"
android:layout_marginBottom="20dp"/>

<ListView
android:id="@+id/fruitListView"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:layout_marginTop="10dp"/>
</LinearLayout>

##MainActivity.java

package com.example.fruitlistdemo;

import android.os.Bundle;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Array of fruits
String[] fruits = {"Apple", "Banana", "Orange", "Mango", "Grapes",
"Pineapple", "Strawberry", "Kiwi"};

// Initialize ListView
ListView fruitListView = findViewById(R.id.fruitListView);

// Create ArrayAdapter to populate the ListView
ArrayAdapter<String> adapter = new ArrayAdapter<>(this,
android.R.layout.simple_list_item_1, fruits);

// Set the adapter to the ListView
fruitListView.setAdapter(adapter);
}
}

slip 11
Q.1 Create android application to change Font Size, Color and Font Family of
String.

Name: TextStyleDemo
Package name: com.example.textstyledemo

##MainActivity.java
package com.example.textstyledemo;

import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

private TextView collegeTextView;
private Button changeColorButton, increaseSizeButton, decreaseSizeButton,
changeFontButton;
private float currentTextSize = 18f; // Initial size in sp
private int colorIndex = 0; // To cycle through colors
private int fontIndex = 0; // To cycle through font families

@Override
protected void onCreate(Bundle savedInstanceState) {

super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize UI elements
collegeTextView = findViewById(R.id.collegeTextView);
changeColorButton = findViewById(R.id.changeColorButton);
increaseSizeButton = findViewById(R.id.increaseSizeButton);
decreaseSizeButton = findViewById(R.id.decreaseSizeButton);
changeFontButton = findViewById(R.id.changeFontButton);

// Set button click listeners
changeColorButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
changeColor();
}
});

increaseSizeButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
increaseFontSize();
}
});

decreaseSizeButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {

decreaseFontSize();
}
});

changeFontButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
changeFontFamily();
}
});
}

private void changeColor() {
// Cycle through colors
switch (colorIndex % 4) {
case 0:
collegeTextView.setTextColor(Color.RED);
break;
case 1:
collegeTextView.setTextColor(Color.BLUE);
break;
case 2:
collegeTextView.setTextColor(Color.GREEN);
break;
case 3:
collegeTextView.setTextColor(Color.BLACK);
break;
}

colorIndex++;
}

private void increaseFontSize() {
currentTextSize += 2f;
collegeTextView.setTextSize(currentTextSize);
}

private void decreaseFontSize() {
if (currentTextSize > 2f) { // Prevent negative or too small size
currentTextSize -= 2f;
collegeTextView.setTextSize(currentTextSize);
}
}

private void changeFontFamily() {
// Cycle through font families
switch (fontIndex % 3) {
case 0:
collegeTextView.setTypeface(null, Typeface.NORMAL);
break;
case 1:
collegeTextView.setTypeface(null, Typeface.BOLD);
break;
case 2:
collegeTextView.setTypeface(null, Typeface.ITALIC);
break;
}

fontIndex++;
}
}

##AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.textstyledemo">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.TextStyleDemo">
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp"
android:fitsSystemWindows="true">
<TextView
android:id="@+id/collegeTextView"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="College Name"
android:textSize="18sp"
android:textStyle="bold"
android:layout_gravity="center"
android:layout_marginBottom="20dp"/>
<Button
android:id="@+id/changeColorButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Change Color"
android:layout_gravity="center"
android:layout_marginBottom="10dp"/>
<Button
android:id="@+id/increaseSizeButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Increase Font Size"
android:layout_gravity="center"
android:layout_marginBottom="10dp"/>
<Button
android:id="@+id/decreaseSizeButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Decrease Font Size"
android:layout_gravity="center"
android:layout_marginBottom="10dp"/>
<Button

android:id="@+id/changeFontButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Change Font Family"
android:layout_gravity="center"/>
</LinearLayout>
Q.2 Create First Activity to accept information like Student First Name, Middle
Name, Last Name, Date of birth, Address, Email ID and display all information
on Second Activity whenuser click on the Submit button

project= StudentInfoApp.
##AndroidManifest.xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.studentinfoapp">

<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.StudentInfoApp">

<!-- Main Activity with android:exported="true" -->
<activity
android:name=".MainActivity"
android:exported="true"> <!-- Required for Android 12+ -->
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />

</intent-filter>
</activity>

<!-- Second Activity -->
<activity android:name=".SecondActivity" />

</application>
</manifest>
##activity_main.xml
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:padding="20dp"
android:orientation="vertical">

<EditText
android:id="@+id/etFirstName"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="First Name" />

<EditText
android:id="@+id/etMiddleName"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Middle Name" />

<EditText

android:id="@+id/etLastName"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Last Name" />

<EditText
android:id="@+id/etDob"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Date of Birth (DD/MM/YYYY)" />

<EditText
android:id="@+id/etAddress"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Address" />

<EditText
android:id="@+id/etEmail"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:hint="Email" />

<Button
android:id="@+id/btnSubmit"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:text="Submit" />

</LinearLayout>

##MainActivity.java
package com.example.studentinfoapp;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

EditText etFirstName, etMiddleName, etLastName, etDob, etAddress, etEmail;
Button btnSubmit;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

// Initialize EditText fields
etFirstName = findViewById(R.id.etFirstName);
etMiddleName = findViewById(R.id.etMiddleName);

etLastName = findViewById(R.id.etLastName);
etDob = findViewById(R.id.etDob);
etAddress = findViewById(R.id.etAddress);
etEmail = findViewById(R.id.etEmail);

// Initialize Button
btnSubmit = findViewById(R.id.btnSubmit);

// Set onClickListener for the button
btnSubmit.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Get values from input fields
String firstName = etFirstName.getText().toString();
String middleName = etMiddleName.getText().toString();
String lastName = etLastName.getText().toString();
String dob = etDob.getText().toString();
String address = etAddress.getText().toString();
String email = etEmail.getText().toString();

// Create an Intent to start SecondActivity
Intent intent = new Intent(MainActivity.this, SecondActivity.class);
intent.putExtra("FIRST_NAME", firstName);
intent.putExtra("MIDDLE_NAME", middleName);
intent.putExtra("LAST_NAME", lastName);
intent.putExtra("DOB", dob);
intent.putExtra("ADDRESS", address);
intent.putExtra("EMAIL", email);

// Start SecondActivity
startActivity(intent);
}
});
}
}

##create another activity
name-SecondActivity

##activity_second.xml
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:padding="20dp"
android:orientation="vertical">

<TextView
android:id="@+id/tvDisplay"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:textSize="18sp"
android:textStyle="bold" />

</LinearLayout>

##SecondActivity.java
package com.example.studentinfoapp;

import android.os.Bundle;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

public class SecondActivity extends AppCompatActivity {

TextView tvDisplay;

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second);

// Initialize TextView
tvDisplay = findViewById(R.id.tvDisplay);

// Get data from Intent
String firstName = getIntent().getStringExtra("FIRST_NAME");
String middleName = getIntent().getStringExtra("MIDDLE_NAME");
String lastName = getIntent().getStringExtra("LAST_NAME");
String dob = getIntent().getStringExtra("DOB");
String address = getIntent().getStringExtra("ADDRESS");
String email = getIntent().getStringExtra("EMAIL");

// Display student details
String displayText = "Student Details:\n\n"
+ "First Name: " + firstName + "\n"
+ "Middle Name: " + middleName + "\n"
+ "Last Name: " + lastName + "\n"
+ "Date of Birth: " + dob + "\n"
+ "Address: " + address + "\n"
+ "Email: " + email;

tvDisplay.setText(displayText);
}
}

slip 12
Q1.Create a Simple Application Which Send ―Hi‖ message from one activity to
another withhelp of Button (Use Intent).
Name: MessageApp
Package name: com.example.messageapp

##androidmanifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest
xmlns:android="http://schemas.android.com/apk/res/android
"
package="com.example.messageapp">
<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.MessageApp">
<activity
android:name=".SecondActivity"
android:exported="false" />
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action
android:name="android.intent.action.MAIN" />
<category
android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>

##activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
xmlns:android="http://schemas.android.com/apk/res/android
"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp"
android:background="#FFFFFF">
<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Click the button to send a message"
android:textSize="18sp"
android:layout_marginBottom="20dp" />
<Button
android:id="@+id/sendButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Send Message"
android:backgroundTint="#2196F3"
android:textColor="#FFFFFF" />
</LinearLayout>
##mainactivity.java
package com.example.messageapp;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;
public class MainActivity extends AppCompatActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

setContentView(R.layout.activity_main);
// Initialize Button
Button sendButton =
findViewById(R.id.sendButton);
// Set OnClickListener for the button
sendButton.setOnClickListener(new
View.OnClickListener() {
@Override
public void onClick(View v) {
// Create Intent to start SecondActivity
Intent intent = new
Intent(MainActivity.this, SecondActivity.class);
// Put the "Hi" message into the Intent
intent.putExtra("message", "Hi");
// Start the second activity
startActivity(intent);
}
});
}
}
##create new activity
name-SecondActivity
##activity_second.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
xmlns:android="http://schemas.android.com/apk/res/android
"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center"
android:padding="16dp"
android:background="#FFFFFF">
<TextView
android:id="@+id/messageTextView"
android:layout_width="wrap_content"

android:layout_height="wrap_content"
android:text="Message will appear here"
android:textSize="18sp"
android:textColor="#000000" />
</LinearLayout>
##second activity.java
package com.example.messageapp;
import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
public class SecondActivity extends AppCompatActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second);
// Initialize TextView
TextView messageTextView =
findViewById(R.id.messageTextView);
// Get the message from the Intent
Bundle extras = getIntent().getExtras();
if (extras != null) {
String message = extras.getString("message");
if (message != null) {
messageTextView.setText(message);
}
}
}
}

Q2. Create a custom "Contact" layout to hold multiple pieces of information,
including: Photo, Name, Contact Number, E-mail id

slip 14
Q1. Create a Simple Application which shows the Life Cycle of Activity. (used
log)
- Name:LifecycleDemo
- Package name:Leave as default (e.g., `com.example.lifecycledemo`).
1.activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:padding="16dp"
android:gravity="center">
<!-- TextView to show lifecycle messages -->
<TextView
android:id="@+id/lifecycleTextView"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Lifecycle Stage Will Appear Here"
android:textSize="20sp"
android:textColor="#000000" />
<!-- Button to finish the activity -->
<Button
android:id="@+id/exitButton"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Exit Activity"
android:layout_marginTop="20dp" />
</LinearLayout>
2. MainActivity.java
package com.example.lifecycledemo;
import android.os.Bundle;
import android.util.Log;

import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
public class MainActivity extends AppCompatActivity {
// Declare variables
private TextView lifecycleTextView;
private Button exitButton;
private static final String TAG = "LifecycleDemo"; // For logging
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
// Link XML elements to Java
lifecycleTextView = findViewById(R.id.lifecycleTextView);
exitButton = findViewById(R.id.exitButton);
// Update TextView and log
lifecycleTextView.setText("onCreate() Called");
Log.d(TAG, "onCreate() Called");
// Button click to finish activity
exitButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
finish(); // Ends the activity
}
});
}
@Override
protected void onStart() {
super.onStart();
lifecycleTextView.setText("onStart() Called");
Log.d(TAG, "onStart() Called");
}
@Override
protected void onResume() {
super.onResume();
lifecycleTextView.setText("onResume() Called");

Log.d(TAG, "onResume() Called");
}
@Override
protected void onPause() {
super.onPause();
lifecycleTextView.setText("onPause() Called");
Log.d(TAG, "onPause() Called");
}
@Override
protected void onStop() {
super.onStop();
lifecycleTextView.setText("onStop() Called");
Log.d(TAG, "onStop() Called");
}
@Override
protected void onRestart() {
super.onRestart();
lifecycleTextView.setText("onRestart() Called");
Log.d(TAG, "onRestart() Called");
}
@Override
protected void onDestroy() {
super.onDestroy();
lifecycleTextView.setText("onDestroy() Called");
Log.d(TAG, "onDestroy() Called");
}
}
2. Create an Android application to send email.

